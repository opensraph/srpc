// Copyright 2022-2023 The Connect Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: srpc/eliza/v1/eliza.proto

package elizav1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ElizaService_Say_FullMethodName       = "/srpc.eliza.v1.ElizaService/Say"
	ElizaService_Converse_FullMethodName  = "/srpc.eliza.v1.ElizaService/Converse"
	ElizaService_Introduce_FullMethodName = "/srpc.eliza.v1.ElizaService/Introduce"
)

// ElizaServiceClient is the client API for ElizaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ElizaService provides a way to talk to Eliza, a port of the DOCTOR script
// for Joseph Weizenbaum's original ELIZA program. Created in the mid-1960s at
// the MIT Artificial Intelligence Laboratory, ELIZA demonstrates the
// superficiality of human-computer communication. DOCTOR simulates a
// psychotherapist, and is commonly found as an Easter egg in emacs
// distributions.
type ElizaServiceClient interface {
	// Say is a unary RPC. Eliza responds to the prompt with a single sentence.
	Say(ctx context.Context, in *SayRequest, opts ...grpc.CallOption) (*SayResponse, error)
	// Converse is a bidirectional RPC. The caller may exchange multiple
	// back-and-forth messages with Eliza over a long-lived connection. Eliza
	// responds to each ConverseRequest with a ConverseResponse.
	Converse(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ConverseRequest, ConverseResponse], error)
	// Introduce is a server streaming RPC. Given the caller's name, Eliza
	// returns a stream of sentences to introduce itself.
	Introduce(ctx context.Context, in *IntroduceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[IntroduceResponse], error)
}

type elizaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewElizaServiceClient(cc grpc.ClientConnInterface) ElizaServiceClient {
	return &elizaServiceClient{cc}
}

func (c *elizaServiceClient) Say(ctx context.Context, in *SayRequest, opts ...grpc.CallOption) (*SayResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SayResponse)
	err := c.cc.Invoke(ctx, ElizaService_Say_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *elizaServiceClient) Converse(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ConverseRequest, ConverseResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ElizaService_ServiceDesc.Streams[0], ElizaService_Converse_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ConverseRequest, ConverseResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ElizaService_ConverseClient = grpc.BidiStreamingClient[ConverseRequest, ConverseResponse]

func (c *elizaServiceClient) Introduce(ctx context.Context, in *IntroduceRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[IntroduceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ElizaService_ServiceDesc.Streams[1], ElizaService_Introduce_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[IntroduceRequest, IntroduceResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ElizaService_IntroduceClient = grpc.ServerStreamingClient[IntroduceResponse]

// ElizaServiceServer is the server API for ElizaService service.
// All implementations must embed UnimplementedElizaServiceServer
// for forward compatibility.
//
// ElizaService provides a way to talk to Eliza, a port of the DOCTOR script
// for Joseph Weizenbaum's original ELIZA program. Created in the mid-1960s at
// the MIT Artificial Intelligence Laboratory, ELIZA demonstrates the
// superficiality of human-computer communication. DOCTOR simulates a
// psychotherapist, and is commonly found as an Easter egg in emacs
// distributions.
type ElizaServiceServer interface {
	// Say is a unary RPC. Eliza responds to the prompt with a single sentence.
	Say(context.Context, *SayRequest) (*SayResponse, error)
	// Converse is a bidirectional RPC. The caller may exchange multiple
	// back-and-forth messages with Eliza over a long-lived connection. Eliza
	// responds to each ConverseRequest with a ConverseResponse.
	Converse(grpc.BidiStreamingServer[ConverseRequest, ConverseResponse]) error
	// Introduce is a server streaming RPC. Given the caller's name, Eliza
	// returns a stream of sentences to introduce itself.
	Introduce(*IntroduceRequest, grpc.ServerStreamingServer[IntroduceResponse]) error
	mustEmbedUnimplementedElizaServiceServer()
}

// UnimplementedElizaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedElizaServiceServer struct{}

func (UnimplementedElizaServiceServer) Say(context.Context, *SayRequest) (*SayResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Say not implemented")
}
func (UnimplementedElizaServiceServer) Converse(grpc.BidiStreamingServer[ConverseRequest, ConverseResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Converse not implemented")
}
func (UnimplementedElizaServiceServer) Introduce(*IntroduceRequest, grpc.ServerStreamingServer[IntroduceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Introduce not implemented")
}
func (UnimplementedElizaServiceServer) mustEmbedUnimplementedElizaServiceServer() {}
func (UnimplementedElizaServiceServer) testEmbeddedByValue()                      {}

// UnsafeElizaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ElizaServiceServer will
// result in compilation errors.
type UnsafeElizaServiceServer interface {
	mustEmbedUnimplementedElizaServiceServer()
}

func RegisterElizaServiceServer(s grpc.ServiceRegistrar, srv ElizaServiceServer) {
	// If the following call pancis, it indicates UnimplementedElizaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ElizaService_ServiceDesc, srv)
}

func _ElizaService_Say_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SayRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ElizaServiceServer).Say(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ElizaService_Say_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ElizaServiceServer).Say(ctx, req.(*SayRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ElizaService_Converse_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ElizaServiceServer).Converse(&grpc.GenericServerStream[ConverseRequest, ConverseResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ElizaService_ConverseServer = grpc.BidiStreamingServer[ConverseRequest, ConverseResponse]

func _ElizaService_Introduce_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(IntroduceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ElizaServiceServer).Introduce(m, &grpc.GenericServerStream[IntroduceRequest, IntroduceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ElizaService_IntroduceServer = grpc.ServerStreamingServer[IntroduceResponse]

// ElizaService_ServiceDesc is the grpc.ServiceDesc for ElizaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ElizaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "srpc.eliza.v1.ElizaService",
	HandlerType: (*ElizaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Say",
			Handler:    _ElizaService_Say_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Converse",
			Handler:       _ElizaService_Converse_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Introduce",
			Handler:       _ElizaService_Introduce_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "srpc/eliza/v1/eliza.proto",
}
