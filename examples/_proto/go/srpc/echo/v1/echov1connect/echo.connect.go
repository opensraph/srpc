// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: srpc/echo/v1/echo.proto

package echov1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/opensraph/srpc/examples/_proto/go/srpc/echo/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// EchoServiceName is the fully-qualified name of the EchoService service.
	EchoServiceName = "srpc.echo.v1.EchoService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// EchoServiceUnaryEchoProcedure is the fully-qualified name of the EchoService's UnaryEcho RPC.
	EchoServiceUnaryEchoProcedure = "/srpc.echo.v1.EchoService/UnaryEcho"
	// EchoServiceServerStreamingEchoProcedure is the fully-qualified name of the EchoService's
	// ServerStreamingEcho RPC.
	EchoServiceServerStreamingEchoProcedure = "/srpc.echo.v1.EchoService/ServerStreamingEcho"
	// EchoServiceClientStreamingEchoProcedure is the fully-qualified name of the EchoService's
	// ClientStreamingEcho RPC.
	EchoServiceClientStreamingEchoProcedure = "/srpc.echo.v1.EchoService/ClientStreamingEcho"
	// EchoServiceBidirectionalStreamingEchoProcedure is the fully-qualified name of the EchoService's
	// BidirectionalStreamingEcho RPC.
	EchoServiceBidirectionalStreamingEchoProcedure = "/srpc.echo.v1.EchoService/BidirectionalStreamingEcho"
)

// EchoServiceClient is a client for the srpc.echo.v1.EchoService service.
type EchoServiceClient interface {
	// UnaryEcho is unary echo.
	UnaryEcho(context.Context, *connect.Request[v1.EchoRequest]) (*connect.Response[v1.EchoResponse], error)
	// ServerStreamingEcho is server side streaming.
	ServerStreamingEcho(context.Context, *connect.Request[v1.EchoRequest]) (*connect.ServerStreamForClient[v1.EchoResponse], error)
	// ClientStreamingEcho is client side streaming.
	ClientStreamingEcho(context.Context) *connect.ClientStreamForClient[v1.EchoRequest, v1.EchoResponse]
	// BidirectionalStreamingEcho is bidi streaming.
	BidirectionalStreamingEcho(context.Context) *connect.BidiStreamForClient[v1.EchoRequest, v1.EchoResponse]
}

// NewEchoServiceClient constructs a client for the srpc.echo.v1.EchoService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewEchoServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) EchoServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	echoServiceMethods := v1.File_srpc_echo_v1_echo_proto.Services().ByName("EchoService").Methods()
	return &echoServiceClient{
		unaryEcho: connect.NewClient[v1.EchoRequest, v1.EchoResponse](
			httpClient,
			baseURL+EchoServiceUnaryEchoProcedure,
			connect.WithSchema(echoServiceMethods.ByName("UnaryEcho")),
			connect.WithClientOptions(opts...),
		),
		serverStreamingEcho: connect.NewClient[v1.EchoRequest, v1.EchoResponse](
			httpClient,
			baseURL+EchoServiceServerStreamingEchoProcedure,
			connect.WithSchema(echoServiceMethods.ByName("ServerStreamingEcho")),
			connect.WithClientOptions(opts...),
		),
		clientStreamingEcho: connect.NewClient[v1.EchoRequest, v1.EchoResponse](
			httpClient,
			baseURL+EchoServiceClientStreamingEchoProcedure,
			connect.WithSchema(echoServiceMethods.ByName("ClientStreamingEcho")),
			connect.WithClientOptions(opts...),
		),
		bidirectionalStreamingEcho: connect.NewClient[v1.EchoRequest, v1.EchoResponse](
			httpClient,
			baseURL+EchoServiceBidirectionalStreamingEchoProcedure,
			connect.WithSchema(echoServiceMethods.ByName("BidirectionalStreamingEcho")),
			connect.WithClientOptions(opts...),
		),
	}
}

// echoServiceClient implements EchoServiceClient.
type echoServiceClient struct {
	unaryEcho                  *connect.Client[v1.EchoRequest, v1.EchoResponse]
	serverStreamingEcho        *connect.Client[v1.EchoRequest, v1.EchoResponse]
	clientStreamingEcho        *connect.Client[v1.EchoRequest, v1.EchoResponse]
	bidirectionalStreamingEcho *connect.Client[v1.EchoRequest, v1.EchoResponse]
}

// UnaryEcho calls srpc.echo.v1.EchoService.UnaryEcho.
func (c *echoServiceClient) UnaryEcho(ctx context.Context, req *connect.Request[v1.EchoRequest]) (*connect.Response[v1.EchoResponse], error) {
	return c.unaryEcho.CallUnary(ctx, req)
}

// ServerStreamingEcho calls srpc.echo.v1.EchoService.ServerStreamingEcho.
func (c *echoServiceClient) ServerStreamingEcho(ctx context.Context, req *connect.Request[v1.EchoRequest]) (*connect.ServerStreamForClient[v1.EchoResponse], error) {
	return c.serverStreamingEcho.CallServerStream(ctx, req)
}

// ClientStreamingEcho calls srpc.echo.v1.EchoService.ClientStreamingEcho.
func (c *echoServiceClient) ClientStreamingEcho(ctx context.Context) *connect.ClientStreamForClient[v1.EchoRequest, v1.EchoResponse] {
	return c.clientStreamingEcho.CallClientStream(ctx)
}

// BidirectionalStreamingEcho calls srpc.echo.v1.EchoService.BidirectionalStreamingEcho.
func (c *echoServiceClient) BidirectionalStreamingEcho(ctx context.Context) *connect.BidiStreamForClient[v1.EchoRequest, v1.EchoResponse] {
	return c.bidirectionalStreamingEcho.CallBidiStream(ctx)
}

// EchoServiceHandler is an implementation of the srpc.echo.v1.EchoService service.
type EchoServiceHandler interface {
	// UnaryEcho is unary echo.
	UnaryEcho(context.Context, *connect.Request[v1.EchoRequest]) (*connect.Response[v1.EchoResponse], error)
	// ServerStreamingEcho is server side streaming.
	ServerStreamingEcho(context.Context, *connect.Request[v1.EchoRequest], *connect.ServerStream[v1.EchoResponse]) error
	// ClientStreamingEcho is client side streaming.
	ClientStreamingEcho(context.Context, *connect.ClientStream[v1.EchoRequest]) (*connect.Response[v1.EchoResponse], error)
	// BidirectionalStreamingEcho is bidi streaming.
	BidirectionalStreamingEcho(context.Context, *connect.BidiStream[v1.EchoRequest, v1.EchoResponse]) error
}

// NewEchoServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewEchoServiceHandler(svc EchoServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	echoServiceMethods := v1.File_srpc_echo_v1_echo_proto.Services().ByName("EchoService").Methods()
	echoServiceUnaryEchoHandler := connect.NewUnaryHandler(
		EchoServiceUnaryEchoProcedure,
		svc.UnaryEcho,
		connect.WithSchema(echoServiceMethods.ByName("UnaryEcho")),
		connect.WithHandlerOptions(opts...),
	)
	echoServiceServerStreamingEchoHandler := connect.NewServerStreamHandler(
		EchoServiceServerStreamingEchoProcedure,
		svc.ServerStreamingEcho,
		connect.WithSchema(echoServiceMethods.ByName("ServerStreamingEcho")),
		connect.WithHandlerOptions(opts...),
	)
	echoServiceClientStreamingEchoHandler := connect.NewClientStreamHandler(
		EchoServiceClientStreamingEchoProcedure,
		svc.ClientStreamingEcho,
		connect.WithSchema(echoServiceMethods.ByName("ClientStreamingEcho")),
		connect.WithHandlerOptions(opts...),
	)
	echoServiceBidirectionalStreamingEchoHandler := connect.NewBidiStreamHandler(
		EchoServiceBidirectionalStreamingEchoProcedure,
		svc.BidirectionalStreamingEcho,
		connect.WithSchema(echoServiceMethods.ByName("BidirectionalStreamingEcho")),
		connect.WithHandlerOptions(opts...),
	)
	return "/srpc.echo.v1.EchoService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case EchoServiceUnaryEchoProcedure:
			echoServiceUnaryEchoHandler.ServeHTTP(w, r)
		case EchoServiceServerStreamingEchoProcedure:
			echoServiceServerStreamingEchoHandler.ServeHTTP(w, r)
		case EchoServiceClientStreamingEchoProcedure:
			echoServiceClientStreamingEchoHandler.ServeHTTP(w, r)
		case EchoServiceBidirectionalStreamingEchoProcedure:
			echoServiceBidirectionalStreamingEchoHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedEchoServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedEchoServiceHandler struct{}

func (UnimplementedEchoServiceHandler) UnaryEcho(context.Context, *connect.Request[v1.EchoRequest]) (*connect.Response[v1.EchoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("srpc.echo.v1.EchoService.UnaryEcho is not implemented"))
}

func (UnimplementedEchoServiceHandler) ServerStreamingEcho(context.Context, *connect.Request[v1.EchoRequest], *connect.ServerStream[v1.EchoResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("srpc.echo.v1.EchoService.ServerStreamingEcho is not implemented"))
}

func (UnimplementedEchoServiceHandler) ClientStreamingEcho(context.Context, *connect.ClientStream[v1.EchoRequest]) (*connect.Response[v1.EchoResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("srpc.echo.v1.EchoService.ClientStreamingEcho is not implemented"))
}

func (UnimplementedEchoServiceHandler) BidirectionalStreamingEcho(context.Context, *connect.BidiStream[v1.EchoRequest, v1.EchoResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("srpc.echo.v1.EchoService.BidirectionalStreamingEcho is not implemented"))
}
